三个题目：
    1.如果一个用户输入的数据,从前到后或者从后到前读到的内容都是一样的,
    我们就称这种数据为"回文",比如123321 或者 12321 或者上海自来水来自海上等等，请编程序实现
    
    2.求10的阶乘（递归实现）
         
    3.用程序实现二分查找算法（前提：数据必须是有序的）
    
 
/**
 * @authorNewRomantics
 * @data2021/11/13 11:17
 */
public class TestDemo1 {
    public static void main(String[] args) {
        /**
         * 1.如果一个用户输入的数据,从前到后或者从后到前读到的内容都是一样的,
         * 我们就称这种数据为"回文",比如123321 或者 12321 或者上海自来水来自海上等等，请编程序实现
         */
        String[] strs = {"1", "2", "3", "4", "2", "1"};
        Integer[] ints = {1, 2, 3, 4, 5, 4, 3, 2, 1};
        String[] str2 = {"上", "海", "自", "来", "水", "来", "自", "海", "上"};
//        checkHuiW(strs);
//        checkHuiW(ints);
//        checkHuiW(str2);

        /**
         * 2.求10的阶乘（递归实现）
         */
//        System.out.println(f(5));

        /**
         * 3.用程序实现二分查找算法（前提：数据必须是有序的）
         */

        int[] a = {1,2,3,6,9,12,17};
        int key = 12;

//        int result = find(a,key);//非递归方法二分查找
        int result = find2(a,key,0,a.length-1);//递归方法
        if(result == -1){
            System.out.println("没有找到您要的数据");
        }else{
            System.out.println("查找的是" + key + "，在数组中的下标为：" + find(a,key) );
        }

    }


    public static <E> void checkHuiW(E[] str) {
        if (str == null) {
            System.out.println("数组元素不能为空喔！");
        }

        int len = str.length;
        int j = len - 1;
        for (int i = 0; i <= j; i++) {

            if (i == j && str[i] == str[j]) {
                System.out.println("Yes,是一个回文数据喔！");
                break;
            }

            if (i != j && str[i] == str[j]) {
                j--;
            } else {
                System.out.println("No,不是回文数据喔！");
                break;
            }
        }
    }

    public static int f(int n) {

        if (n == 1) {
            return 1;
        } else if (n == 2) {
            return 2;
        } else {
            return n * f(n - 1);
        }

    }

    //非递归二分查找
    public static int find(int[] num, int a) {
        int left = 0;
        int end = num.length - 1;
        int middle;

        if (a < num[left] || a > num[end] || left > end) {
            return -1;
        }

        while (left <= end) {

            middle = (left + end) / 2;

            if (a > num[middle]) {
                left = middle + 1;
            } else if (a < num[middle]) {
                end = middle - 1;
            } else {
                return middle;
            }
        }
        return -1;
    }

    //递归二分查找
    public static int find2(int[] a ,int key, int left , int end){
        int middle = (left + end) / 2;
        if(a[middle] > key){
            return find2(a,key,left,middle-1);
        }else if(a[middle] < key){
            return find2(a,key,middle+1,end);
        }else {
            return middle - 1;
        }
    }
}
