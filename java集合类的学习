（1）链表（LinkedList）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的地址 
（2）ArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。ArrayList 继承了 AbstractList ，并实现了 List 接口。 
（3）1.HashSet 基于 HashMap 来实现的，HashSet 实现了 Set 接口,是一个不允许有重复元素的集合 
    HashSet 允许有 null 值。 
    HashSet 是无序的，即不会记录插入的顺序 
    HashSet 不是线程安全的， 如果多个线程尝试同时修改 HashSet， 
            则最终结果是不确定的。 您必须在多线程访问时显式同步对 HashSet 的并发访问。 
     2. add() 添加元素 
      contains() 测试是否包含元素 
      sites.clear()  清楚所有元素 
      size()  获取元素大小 
      
 （4）1. HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。 
    HashMap 实现了 Map 接口，根据键的 HashCode 值存储数据，具有很快的访问速度，最多允许一条记录的键为 null，不支持线程同步。 
    HashMap 是无序的，即不会记录插入的顺序。 
    HashMap 继承于AbstractMap，实现了 Map、Cloneable、java.io.Serializable 接口。 
    HashMap 中的元素实际上是对象 
      2.  put(key,value) 输入键值对 
          get(key)  通过键获取值 
          remove(key) 通过键移除值 
          clear() 删除所有键值对 
          size()  获取大小 
          keySet()   获取键，然后可以通过get(key)方法获取值 
          values()   只获取值 
          
 （5）1. Java Iterator（迭代器）不是一个集合，它是一种用于访问集合的方法，可用于迭代 ArrayList 和 HashSet 等集合。 
      2.迭代器 it 的两个基本操作是 next 、hasNext 和 remove。 
        调用 it.next() 会返回迭代器的下一个元素，并且更新迭代器的状态。 
        调用 it.hasNext() 用于检测集合中是否还有元素。 
        调用 it.remove() 将迭代器返回的元素删除。 








【class 1 】

/** 

* @Author:WangFY 

* @Date: 2021/11/10 21:39 

* @Discription 本类用于测试链表 

*/ 

public class TestLinkedList { 

    public static void main(String[] args) { 

        /** 

         *   1.Java LinkedList（链表） 类似于 ArrayList，是一种常用的数据容器。 

         *      与 ArrayList 相比，LinkedList 的增加和删除的操作效率更高，而查找和修改的操作效率较低。 

         */ 

  

        //1.add() 添加链表元素 

        LinkedList<Integer> linkedList = new LinkedList<>(); 

        linkedList.add(1); 

        linkedList.add(2); 

        linkedList.add(3); 

        linkedList.add(4); 

        linkedList.add(5); 

        System.out.println(linkedList); 

  

        //2.大多数情况下我们使用 ArrayList 访问列表中的随机元素更加高效，但以下几种情况 LinkedList 提供了更高效的方法。 

        //2.1 在列表开头添加元素 addFirst： 

        linkedList.addFirst(10); 

        //  在列表结尾添加元素 addLast： 

        linkedList.addLast(67); 

        System.out.println(linkedList); 

        //2.2 在列表开头和结尾删除元素:removeFirst,removeLast 

        linkedList.removeFirst(); 

        linkedList.removeLast(); 

        System.out.println(linkedList); 

  

        //3.获取头部元素和尾部元素 

        System.out.println(linkedList.getFirst()); 

        System.out.println(linkedList.getLast()); 

  

        //迭代链表元素    for迭代 

        for (int i = 0; i < linkedList.size(); i++) { 

            System.out.print(linkedList.get(i) + " "); 

        } 

  

        //for-each来迭代 

        for (int i : linkedList) { 

            System.out.print(i); 

        } 

    } 

} 

【class2】

public class ArrayListTest { 

    public static void main(String[] args) { 

        ArrayList<String> strList = new ArrayList<String>(); 

  

        //1.添加元素到 ArrayList 可以使用 add() 方法: 

        strList.add("a"); 

        strList.add("b"); 

        strList.add("c"); 

        strList.add("d"); 

        strList.add("e"); 

  

        //2.访问 ArrayList 中的某个元素可以使用 get() 方法 

        System.out.println(strList.get(0)); //0 

  

        //3.如果要修改 ArrayList 中的元素可以使用 set() 方法： 

        strList.set(1,"bbbbb"); 

        System.out.println(strList); 

  

        //4.如果要删除 ArrayList 中的元素可以使用 remove() 方法： 

        strList.remove(4); 

        System.out.println(strList); 

  

        //5.如果要计算 ArrayList 中的元素数量可以使用 size() 方法： 

        System.out.println(strList.size()); 

  

        //6.我们可以使用 for 来迭代数组列表中的元素 

        for (int i = 0; i < strList.size(); i++) { 

            System.out.println(strList.get(i)); 

        } 

        //也可以使用 for-each 来迭代元素： 

        for (String i: strList) { 

            System.out.println(i); 

        } 

  

        //7.sort() 排序方法 

        ArrayList<Integer> ints = new ArrayList<Integer>(); 

        ints.add(12); 

        ints.add(34); 

        ints.add(6); 

        ints.add(20); 

        ints.add(67); 

        Collections.sort(ints); //引入Collections类 

        System.out.println(ints); 

  

    } 

} 

 class【3】
 /** 

* @Author:WangFY 

* @Date: 2021/11/10 22:06 

* @Discription 

*/ 

public class TestHashSet { 

    public static void main(String[] args) { 

        /** 

         *  1.HashSet 基于 HashMap 来实现的，HashSet 实现了 Set 接口,是一个不允许有重复元素的集合 

         *    HashSet 允许有 null 值。 

         *    HashSet 是无序的，即不会记录插入的顺序 

         *    HashSet 不是线程安全的， 如果多个线程尝试同时修改 HashSet， 

         *            则最终结果是不确定的。 您必须在多线程访问时显式同步对 HashSet 的并发访问。 

         * 

         *  2.  add() 添加元素 

         *      contains() 测试是否包含元素 

         *      sites.clear()  清楚所有元素 

         *      size()  获取元素大小 

         * 

         */ 

  

        HashSet<String> sites = new HashSet<>(); 

        sites.add("apple"); 

        sites.add("banana"); 

        sites.add("orange"); 

        sites.add("peach"); 

        sites.add("lemon"); 

        System.out.println(sites); 

  

        System.out.println(sites.contains("apple")); 

  

        sites.remove("apple"); 

        System.out.println(sites); 

  

//        sites.clear();//清楚set中的所有元素 

  

        sites.size(); 

  

        /*for (int i = 0; i < sites.size(); i++) { 

            System.out.println(sites); 无法使用fori迭代set元素 

        }*/ 

  

        for (String str : sites) { 

            System.out.println(str + " "); 

        } 

  

    } 

} 

【class 4】
/** 

         *   1. HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。 

         *      HashMap 实现了 Map 接口，根据键的 HashCode 值存储数据，具有很快的访问速度，最多允许一条记录的键为 null，不支持线程同步。 

         *      HashMap 是无序的，即不会记录插入的顺序。 

         *      HashMap 继承于AbstractMap，实现了 Map、Cloneable、java.io.Serializable 接口。 

         *      HashMap 中的元素实际上是对象 

         * 

         *   2. put(key,value) 输入键值对 

         *      get(key)  通过键获取值 

         *      remove(key) 通过键移除值 

         *      clear() 删除所有键值对 

         *      size()  获取大小 

         * 

         *      keySet()   获取键，然后可以通过get(key)方法获取值 

         *      values()   只获取值 

         * 

         * 

         */ 

  

        HashMap<Integer,String> hashmap = new HashMap<Integer,String>(); 

        hashmap.put(1,"apple"); 

        hashmap.put(2,"orange"); 

        hashmap.put(4,"banana"); 

        hashmap.put(7,"peach"); 

        hashmap.put(19,"lemon"); 

        System.out.println(hashmap); 

  

        System.out.println(hashmap.get(19)); 

  

        //迭代HashMap中的元素 

        /* 

            如果你只想获取 key，可以使用 keySet() 方法，然后可以通过 get(key) 获取对应的 value 

            如果你只想获取 value，可以使用 values() 方法。 

         */ 

        for (Integer i: hashmap.keySet()) { 

            System.out.println("key: " + i + ", value: " + hashmap.get(i)); 

        } 

  

        for (String str : hashmap.values()) { 

            System.out.println("values: " + str); 

  

        } 

  

    } 

} 

【class 5】
/** 

* @Author:WangFY 

* @Date: 2021/11/10 22:57 

* @Discription 

*/ 

public class TestIterator { 

    public static void main(String[] args) { 

        /** 

         *    1. Java Iterator（迭代器）不是一个集合，它是一种用于访问集合的方法，可用于迭代 ArrayList 和 HashSet 等集合。 

         * 

         *    2.迭代器 it 的两个基本操作是 next 、hasNext 和 remove。 

         *      调用 it.next() 会返回迭代器的下一个元素，并且更新迭代器的状态。 

         *      调用 it.hasNext() 用于检测集合中是否还有元素。 

         *      调用 it.remove() 将迭代器返回的元素删除。 

         * 

         */ 

  

        ArrayList<String> list = new ArrayList<String>(); 

        list.add("a"); 

        list.add("c"); 

        list.add("f"); 

        list.add("s"); 

        list.add("b"); 

        list.add("e"); 

        list.add("u"); 

  

        //获取迭代器 

        Iterator<String> it = list.iterator(); 

        //通过迭代器输出集合中的第一个元素 

        System.out.println(it.next()); 

  

        //循环输出集合元素 

        while (it.hasNext()) { //hasNext()判断集合中是否还有元素 

            System.out.println(it.next()); 

        } 

  

        //remove() 删除元素 

        ArrayList<Integer> ints = new ArrayList<>(); 

        ints.add(1); 

        ints.add(3); 

        ints.add(23); 

        ints.add(14); 

        ints.add(45); 

        ints.add(9); 

        ints.add(77); 

        ints.add(61); 

        ints.add(10); 

  

        Iterator<Integer> ite = ints.iterator(); 

  

        while (ite.hasNext()) { 

            Integer i = ite.next(); 

            if (i > 10) { 

                ite.remove(); 

            } 

        } 

        System.out.println(ints); 

    } 

} 
