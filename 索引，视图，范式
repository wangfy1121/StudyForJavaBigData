
1.索引
	一个索引是存储的表中一个特定列的值数据结构（最常见的是B-Tree）。
	索引是在表的列上创建。所以，要记住的关键点是索引包含一个表中列的值，并且这些值存储在一个数据结构中。
	请记住记住这一点：索引是一种数据结构 。
	索引链接1
		
	（1）创建索引的好处
		①通过创建索引,可以在查询的过程中,提高系统的性能
		②通过创建唯一性索引,可以保证数据库表中每一行数据的唯一性
		③在使用分组和排序子句进行数据检索时,可以减少查询中分组和排序的时间
	
	（2）创建索引的坏处
		①创建索引和维护索引要耗费时间,而且时间随着数据量的增加而增大
		②索引需要占用物理空间,如果要建立聚簇索引,所需要的空间会更大
		③在对表中的数据进行增加删除和修改时需要耗费较多的时间,因为索引也要动态地维护
	
	（3）应该在哪些列上创建索引呢
		①经常需要搜索的列上
		②作为主键的列上
		③经常用在连接的列上,这些列主要是一些外键,可以加快连接的速度
		④经常需要根据范围进行搜索的列上
		⑤经常需要排序的列上
		⑥经常使用在where子句上面的列上
	
	（4）不应该在哪些列上创建索引
		①查询中很少用到的列
		②对于那些具有很少数据值的列.比如人事表的性别列,bit数据类型的列
		③对于那些定义为text,image的列.因为这些列的数据量相当大
		④当对修改性能的要求远远大于搜索性能时.因为当增加索引时,会提高搜索性能,但是会降低修改性能
		索引链接2
	
	（5）mysql的索引我们分为三大类来讲单列索引(普通索引，唯一索引，主键索引)、组合索引、全文索引。
	
		一、单列索引：一个索引只包含单个列，但一个表中可以有多个单列索引。 这里不要搞混淆了
		
		1：普通索引：MySQL中基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值，
					   纯粹为了查询数据更快一 点。
		2：唯一索引：索引列中的值必须是唯一的，但是允许为空值。
		3：主键索引：是一种特殊的唯一索引，不允许有空值。（主键约束，就是一个主键索引）。
		
		主键索引与唯一索引的区别：
		
		  1. 主键是一种约束，唯一索引是一种索引，两者在本质上是不同的。
		  2. 主键创建后一定包含一个唯一性索引，唯一性索引并不一定就是主键。
		  3. 唯一性索引列允许空值，而主键列不允许为空值。
		  4. 主键索引在创建时，已经默认为非空值+ 唯一索引了。
		  5. 一个表最多只能创建一个主键索引，但可以创建多个唯一索引。
		  6. 主键更适合那些不容易更改的唯一标识，如自动递增列、身份证号等。
		  7. 主键可以被其他表引用为外键，而唯一索引不能。
		
		二、组合索引：在表中的多个字段组合上创建的索引，只有在查询条件中使用了这些字段的左边字段时，索引才会被使用，使用组合索引时遵循最左前缀集合。例如，这里由id、name和age3个字段构成的索引，索引行中就按id/name/age的顺序存放，索引可以索引下面字段组合(id，name，age)、(id，name)或者(id)。如果要查询的字段不构成索引最左面的前缀，那么就不会是用索引，比如，age或者（name，age）组合就不会使用索引查询。
		
		三、全文索引：全文索引，只有在MyISAM引擎上才能使用，只能在CHAR,VARCHAR,TEXT类型字段上使用全文索引，介绍了要求，说说什么是全文索引，就是在一堆文字中，通过其中的某个关键字等，就能找到该字段所属的记录行，比如有"你是个大煞笔，二货 ..." 通过大煞笔，可能就可以找到该条记录。这里说的是可能，因为全文索引的使用涉及了很多细节，我们只需要知道这个大概意思。一般开发中，不贵用到全文索引，因为其占用很大的物理空间和降低了记录修改性，故较为少用。
		索引链接3
		
	（6）索引sql
		创建索引的语句：
		
		1：直接创建索引：
		
		CREATE INDEX index_name ON table(column(length));  创建普通索引
		CREATE UNIQUE INDEX indexName ON table(column(length)); 创建唯一索引
		CREATE FULLTEXT INDEX index_content ON article(content); 全文索引
		
		2：修改表结构的方式添加索引：
		
		ALTER TABLE table_name ADD INDEX index_name ON (column(length));  创建普通索引
		ALTER TABLE table_name ADD UNIQUE indexName ON (column(length)); 创建唯一索引
		ALTER TABLE `table` ADD INDEX name_city_age (name,city,age);  组合索引
		ALTER TABLE article ADD FULLTEXT index_content(content); 全文索引
		
		（创建/查看/使用索引，批量插入，一次性插入多条数据）
		
		
		3：创建表的时候创建索引：
		
		    CREATE TABLE `table` (
		        `id` int(11) NOT NULL AUTO_INCREMENT ,
		        `title` char(255) CHARACTER NOT NULL ,
		        `content` text CHARACTER NULL ,
		        `time` int(10) NULL DEFAULT NULL ,
		        PRIMARY KEY (`id`),
		        INDEX index_name (title(length))
		    );  普通索引
		
		    CREATE TABLE `table` (
		        `id` int(11) NOT NULL AUTO_INCREMENT ,
		        `title` char(255) CHARACTER NOT NULL ,
		        `content` text CHARACTER NULL ,
		        `time` int(10) NULL DEFAULT NULL ,
		        UNIQUE indexName (title(length))
		    );  唯一索引
		
		    CREATE TABLE `table` (
		        `id` int(11) NOT NULL AUTO_INCREMENT ,
		        `title` char(255) NOT NULL ,
		        PRIMARY KEY (`id`)
		    );  主键索引
		
		    CREATE TABLE `table` (
		        `id` int(11) NOT NULL AUTO_INCREMENT ,
		        `title` char(255) CHARACTER NOT NULL ,
		        `content` text CHARACTER NULL ,
		        `time` int(10) NULL DEFAULT NULL ,
		        PRIMARY KEY (`id`),
		        FULLTEXT (content)
		    );  全文索引
		
		4：删除索引：
		DROP INDEX index_name ON table;
		
		5：查看索引：
		show index from table_name;
		
2.视图
	（1）概念：
		视图是可视化的表，视图当做是一个特殊的表，是指，把sql执行操作，缓存到了视图中
		下次还要发起相同的sql，直接查视图。
		
		
		1.创建视图：语法：create view 视图名 as SQL语句
					练习：查询名字里包含a的员工信息
					CREATE VIEW view1 AS
					SELECT * FROM emp WHERE ename LIKE '%a%';
		2.查看视图：语法：SELECT * FROM view1;
		
		优缺点：提高了SQL的复用率，但是占用更多的内存
	
	 （2）使用SQL的注意事项：
			1. 查询SQL尽量不要使用select *，而是具体字段
			2. 避免在where子句中使用or来连接条件
			3. 使用varchar代替char
			4. 尽量使用数值替代字符串类型
			
			5. 查询尽量避免返回大量数据
			6. 使用explain分析你SQL执行计划
			
			

3.范式
		关系型数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、
		巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。
		范式越高，冗余最低，一般到三范式，再往上，表越多，可能导致查询效率下降。
		所以有时为了提高运行效率，可以让数据冗余.
		
		1NF的定义为：符合1NF的关系中的每个属性都不可再分
		
		
		2NF在1NF的基础之上，消除了非主属性对于码的部分函数依赖,也就是说,表里的每个字段都要依赖于主键
		
		第一步：找出数据表中所有的码。
		第二步：根据第一步所得到的码，找出所有的主属性。
		第三步：数据表中，除去所有的主属性，剩下的就都是非主属性了。
		第四步：查看是否存在非主属性对码的部分函数依赖
		
		3NF在2NF的基础之上，消除了非主属性对于码的传递函数依赖
		
		就是指没个属性都跟主键有直接关系而不是间接关系。
		像：a-->b-->c  属性之间含有这样的关系，是不符合第三范式的。
		比如Student表（学号，姓名，年龄，性别，所在院校，院校地址，院校电话）
		这样一个表结构，就存在上述关系。 学号--> 所在院校 --> (院校地址，院校电话)
		这样的表结构，我们应该拆开来，如下。
		（学号，姓名，年龄，性别，所在院校）--（所在院校，院校地址，院校电话）
		
		总结
		三大范式只是一般设计数据库的基本理念，可以建立冗余较小、结构合理的数据库。
		如果有特殊情况，当然要特殊对待，数据库设计最重要的是看需求跟性能，需求>性能>表结构。
		所以不能一味的去追求范式建立数据库。



