1.DOM树结构（被封装在vue中）
（1）概述
		是由JS提供的技术, 用来像CSS的选择器一样, 使用JS提供的一套API, 就可以选中网页中的各种元素
	会把HTML网页翻译成一个Document.
（2）Document对象
		getElementById()   通过id属性的值，获取元素，只有一个
		getElementsByname()  通过name属性的值，获取元素，获得多个，存入数组
		getElementsByClassName()  通过class属性的值，获取元素，获得多个，存入数组
		getElementsByTagName() 通过tag获取属性的值,获取元素，获得多个，存入数组
		title--获取标题
innerHtml--获取内容
innerText--获取内容
		
（3）测试用法
		<!DOCTYPE html>
		<html>
			<head>
				<meta charset="utf-8">
				<title>测试DOM</title>
			</head>
		
			<body>
				<div id="d1" onclick="test1()">我是div1</div>
				<div class="a" onclick="test2()">我是div2</div>
				<div name="b">我是div3</div>
		
				<p class="a">我是p1</p>
				<p class="a">我是p2</p>
				<p name="b">我是p3</p>
		
				<span>我是span1</span>
				<span>我是span2</span>
		
				<script>
					//1.利用DOM技术，操作网页中的元素
					//练习1：获取id = "d1"的元素
					var a = window.document.getElementById("d1");
					console.log(a);
					//练习2：获取class = "a"的元素
					var b = document.getElementsByClassName("a");
					console.log(b);
					//练习3：获取id = "d1"的元素的内容
					var c = document.getElementById("d1");
					console.log(c.innerHTML);
					//练习4：获取class = "a"的第二个的内容
					var d = document.getElementsByClassName("a");
					console.log(d[1].innerHTML);
					//练习5：修改id = "d1"的元素的内容
					var e = document.getElementById("d1");
					e.innerHTML = '<i><h1>我变了...</h1></i>'; //修改内容   <i>斜体标签解析成功
					// e.innerText = '<i>我变了</i>' ;//<i>斜体标签解析失败
					//innerHTML可以解析标签，innerText不可以
		
					//练习6：点击我是div1时，打印name = "b" 的第一个元素的内容
					var f = document.getElementsByName("b");
		
					function test1() {
						console.log(f[0].innerHTML); //打印name = "b"的第一个元素的内容
					}
		
					//练习7：点击我是div2时，修改 我是span2 的内容
					var g = document.getElementsByTagName("span");
		
					function test2() {
						g[1].innerHTML = '<h2>我也变了...</h2>';
					}
				</script>
			</body>
		</html>
