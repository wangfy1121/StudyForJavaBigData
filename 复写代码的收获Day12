今天学习了包装类,其中Integer包装类有高效方法，类似于常量池、还有BigDecimal包装类用于解决数据精度问题，还有IO流中的FileInputStream,它是抽象父类InuputStream的子类，其中的read()方法读入数据
finall{}代码块是try catch的第三个部分，表示一定会执行的代码块，通常用于关流操作

今天的知识点有点多，但其实也不多，总之在完整复写一遍今天的所有代码之后
不仅对于知识点更加熟悉了，也产生了第一遍学习甚至不敲代码复习时想不到的新问题
继续坚持复写每日代码，带着问题思考


【class 1】
/**
 * @authorNewRomantics
 * @data2021/11/15 10:21
 * <p>
 * 本类用于包装类入门案例
 */
public class TestNumber {
    public static void main(String[] args) {
        //1.1 Integer 创建方式1：Integer(int)
        Integer i1 = new Integer(5);
        Integer i11 = new Integer(5);

        //1.2 Integer 创建方式2：valueOf(int)
        Integer i2 = Integer.valueOf(10);//valueOf(int) 是静态方法所以可以用类名直接调用
        Integer i22 = Integer.valueOf(10);//valueOf(int) 是静态方法所以可以用类名直接调用

        System.out.println(i1 == i11);//f   比较的是地址，所以是false
        System.out.println(i2 == i22);//t
        System.out.println(i1 == i2);//f

        Integer i3 = Integer.valueOf(333);
        Integer i33 = Integer.valueOf(333);
        System.out.println(i3 == i33);//f 原因是333超过了Integer的高效范围

        /*
           【Integer总结】Integer有一种高效的效果，只要满足3个条件：
                 1)是Integer这个类
                 2)使用的创建方式是valueOf()
                 3)包装的基本类型的值在 —128~127这个范围内
                 **满足以上3个条件，相同的数据只会存一次，后续再存都是使用之前存过的数据
         */

        //2.1 Double的创建方式1:new Double(double)
        Double d1 = new Double(1.2);
        Double d11 = new Double(1.2);
        System.out.println("******");
        System.out.println(d1 == d11);//f

        //2.2 Double的创建方式2:valueOf(double)  使用类名调用
        Double d2 = Double.valueOf(3.8);
        Double d22 = Double.valueOf(3.8);

        System.out.println(d1 == d2);//f
        System.out.println(d2 == d22);//f

        /*
            注意：只有Integer有高效方式，Double是没有的，所以用==比较的时候比较的是地址
         */


        System.out.println(i1.parseInt("800") + 2);//802
        System.out.println(d1.parseDouble("2.2") + 1.1);//3.3
        /*
            调用方法的对象是什么类型的，就可以使用这个类的所有资源
            i1是Integer类型的对象，所以可以使用parseInt()将String类型的数据转为int类型
            d1是Double类型的对象，所以可以使用parseDouble()将String类型的数据转为double类型
         */


    }
}

【class 2】
/**
 * @authorNewRomantics
 * @data2021/11/15 11:37
 * <p>
 * 本类用于解决浮点数运算不精确的问题
 */
public class TestBigDecimal {
    public static void main(String[] args) {
//        f1();//使用普通的四则运算，暴露浮点数运算不精确的问题
        f2();//解决方案
    }

    public static void f1() {
        System.out.println("请输入您要计算的两个小数：");
        double a = new Scanner(System.in).nextDouble();
        double b = new Scanner(System.in).nextDouble();
        System.out.println(a + b);
        System.out.println(a - b);
        System.out.println(a * b);
        System.out.println(a / b);
    }

    public static void f2() {
        System.out.println("请输入您要计算的两个小数：");
        double a = new Scanner(System.in).nextDouble();
        double b = new Scanner(System.in).nextDouble();

        //使用工具类对象，把基本类型装箱成工具类对象
        BigDecimal bd1 = new BigDecimal(a + "");
        BigDecimal bd2 = new BigDecimal(b + "");

        /**
         * 【注意】double型的数据本身就不精确，所以即便是把double类型的数据转为BigDecimal算出来也是不精确
         * 【解决方法】在BigDecimal中传入的数据时 使用 "" 将数据转为String类型,BigDecimal会自动转型
         */


        //System.out.println(bd1 + bd2); //报错，bd1和bd2都是引用类型地址，不可以直接加减乘除
        BigDecimal bd3;
        bd3 = bd1.add(bd2);//add() 是加法运算
        System.out.println("加法：" + bd3);

        bd3 = bd1.subtract(bd2);//subtract()  是减法运算
        System.out.println("减法：" + bd3);

        bd3 = bd1.multiply(bd2);//mutiply()  是减法运算
        System.out.println("乘法：" + bd3);

//        bd3 = bd1.divide(bd2);//除不尽时报错
        bd3 = bd1.divide(bd2, 3, BigDecimal.ROUND_HALF_UP);
        System.out.println("除法：" + bd3);
        /*
            除法运算，除不尽时会抛出异常
            注意使用 重载的除法方法 ：divide(x,y,z)
            x:要除以那个对象  y:指的是保留位数  z:指的是舍入方式（四舍五入）
         */


    }

}

【class 3】
/**
 * @authorNewRomantics
 * @data2021/11/15 15:08
 * <p>
 * 本类用于测试文件类FIle
 */
public class TestFile {
    public static void main(String[] args) throws IOException {
        //1.创建File类的对象
        File file = new File("D:\\ready\\1.txt");
            /*  1.ready目录与1.txt文本文档需要自己动手创建
                2.File需要导包：import java.io.File
                3.路径是String类型，必须写正确，不然找不到文件
                4.完整的文件名包括两部分：文件名+后缀名
             */
        //2.测试常用方法
        System.out.println(file.length());//5           获取对应文件的字节量
        System.out.println(file.exists());//true        判断当前文件是否存在
        System.out.println(file.isFile());//true        判断当前文件是否是文件
        System.out.println(file.isDirectory());//false  判断当前文件是否是文件夹
        System.out.println(file.getName());//1.txt      获取当前文件名
        System.out.println(file.getParent());//D:\ready 获取父级路径
        System.out.println(file.getAbsolutePath());//D:\ready\1.txt 获取带盘符的绝对路径

        //测试File 文件的创建于删除
        File file2 = new File("D:\\ready\\2.txt");
        //new关键字只会帮你在内存中创建一个File类型的java对象，并不会帮你在磁盘中对应目录下创建一个真实存在的2.txt文件
        //所以必须自己手动在磁盘中创建文件

        System.out.println(file2.createNewFile());
        /*  创建一个之前不存在的文件2.txt,如果创建成功，会返回true
            由于担心我们file2对象保存的路径有问题，所以IO强制要求我们必须处理这个异常，我们在此选择暂时抛出
            但注意：实际操作中不能将异常直接抛给mian()
            这个异常是我们目前遇到的强制要求必须预先处理的异常
            如果不处理，方法的调用就会报错，通不过编译
         */

        File file3 = new File("D:\\ready\\x");
        System.out.println(file3.mkdir());//mkdir   创建不存在的单层文件夹

        File file4 = new File("D:\\ready\\a\\b\\c");
        System.out.println(file4.mkdirs());//mkdirs     创建不存在的多层文件夹

        System.out.println(file2.delete());//2.txt被删除
        System.out.println(file3.delete());//x文件夹被删除
        System.out.println(file4.delete());//c文件夹被删除
        /*
            delete()不能删除空文件夹
         */

        //4.测试文件列表方法
        file = new File("D:\\ready");
        String[] list = file.list();//list()   输出该文件夹下的所有文件名，存入数组中
        System.out.println(Arrays.toString(list));

        File[] fs = file.listFiles();//listFiles()   输出该文件夹下的所有文件名，存入数组中
        System.out.println(Arrays.toString(fs));
        System.out.println(fs[0].length());

        for (int i = 0; i < fs.length; i++) {
            System.out.println(fs[i]);
            System.out.println(fs[i].isFile());
        }

    }
}

/**
 * @authorNewRomantics
 * @data2021/11/15 16:27
 * <p>
 * 本类用于测试字节输入流
 */
public class TestIn {
    public static void main(String[] args) {
//        method();//使用字节输入流读取
    }

    public static void method2() {

        FileInputStream in = null;
        try {
            //1.创建流对象
            in = new FileInputStream("D:\\ready\\1.txt");
            //2.使用流对象
            int b;
            while ((b = in.read()) != -1) {
                System.out.println(b);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            try {
                //3.关闭流对象
                in.close();

            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    }


    //本方法用于测试操作文件的字节输入流FileInputStream
    public static void method() {

        FileInputStream in = null;
        try {
            //  1.创建字节流输入对象
//            FileInputStream in = new FileInputStream(new File("D:\\ready\\1.txt"));
            //不建议新建一个File对象传入FileInputStream()中，可以直接传入String类型的地址
            in = new FileInputStream("D:\\ready\\1.txt");

            //  2.使用流对象，读取文件的数据到程序中 read()方法每次只能读一个字节
            /* //代码重用性不高
            System.out.println(in.read());//a 的ASCI吗 97
            System.out.println(in.read());
            System.out.println(in.read());
            System.out.println(in.read());//文件中结束时返回-1
            */

            //需求：需要循环读取文件中的所有内容，直至读完
            //定义变量，保存读到的数据
            int b;
            while ((b = in.read()) != -1) {
                System.out.println(b);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            /* 3.finally{}代码块是try catch结构的第3个部分
                这个部分，不论是否捕获到了异常，最终都会执行
                也就是说，这是一块一定会被执行到的代码块，常用语关流操作
             */
            try {
                //关流
                in.close();

            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}

【class 4】
/**
 * @authorNewRomantics
 * @data2021/11/15 11:14
 *
 * 本类用于理解自动装箱和自动拆箱
 *
 */
public class TesBox {
    public static void main(String[] args) {
        //1.创建包装类Integer对象的两种方式
        Integer i1 = new Integer(15);
        Integer i2 = Integer.valueOf(34);
        //2.现在的方式：自动装箱
        Integer i3 = 123;
        /*
            自动装箱：编译器会自动把基本类型int 123,包装成包装类型Integer，底层自动会发生Integer.valueOf(123)
            自动装箱的方向：基本类型 -> 包装类类型  int ---> Integer
         */
        int i4 = i3;
        /*
            自动拆箱：编译会自动把包装类i3的“箱子”拆掉，变回基本数据类型数据123
            自动拆箱的方向：包装类类型 -> 基本类类型   Integer ---> int
         */


    }
}
